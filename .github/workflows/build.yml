name: Build
on:
  push:
  pull_request:
    branches:
      - main
env:
  QT_VERSION: '6.9.0'
jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Install Qt
        id: qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          arch: 'win64_msvc2022_64'
          modules: 'qtmultimedia'
          add-tools-to-path: true
          cache: true

      - name: Generate and Build with CMake
        shell: pwsh
        run: |
          mkdir -p build
          cd build
          cmake ..
          cmake --build . --config Release
          cmake --install . --config Release

      - name: Rename release folder
        shell: pwsh
        run: |
          $releaseDir = "build/install"
          $newDir = "Checkers"
          if (Test-Path $releaseDir) {
              Rename-Item -Path $releaseDir -NewName $newDir
          } else {
              Write-Error "Release folder not found!"
              exit 1
          }
      
      - name: Zip binaries folder
        shell: pwsh
        run: |
          $zipFile = "build/Checkers_win64_msvc2022.zip"
          $folder = "build/Checkers"
          Compress-Archive -Path $folder -DestinationPath $zipFile
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Checkers_win64_msvc2022
          path: build/Checkers_win64_msvc2022.zip
      
      - name: Get current version for installer
        id: get_version
        shell: bash
        run: |
          git fetch --tags
          # Get the latest semver tag (no v prefix)
          LATEST_TAG=$(git tag --list '*.*.*' --sort=-version:refname | head -n 1)

          if [ -z "$LATEST_TAG" ]; then
            # No existing semver tags, use 0.0.0
            CURRENT_VERSION="0.0.0"
          else
            # Use the current tag version directly
            CURRENT_VERSION=$LATEST_TAG
          fi

          echo "Current version: $CURRENT_VERSION"
          echo "TagVersion=${CURRENT_VERSION}" >> $GITHUB_ENV
      
      - name: Update .iss version
        shell: pwsh
        run: |
          $content = Get-Content tools/installer.iss
          $new = $content -replace '(?<=#define AppVersion ")[^"]+', "${{ env.TagVersion }}"
          Set-Content tools/installer.iss -Value $new
      
      - name: Create Installer
        shell: pwsh
        run: |
          $env:Path += ";${env:ProgramFiles(x86)}\Inno Setup 6"
          iscc.exe tools/installer.iss
      
      - name: Upload Installer
        uses: actions/upload-artifact@v4
        with:
          name: Checkers_Installer
          path: tools/Output/Checkers_Installer.exe

  build-android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - qt_arch: android_arm64_v8a
            android_abi: arm64-v8a
            arch_name: arm64
          - qt_arch: android_armv7
            android_abi: armeabi-v7a
            arch_name: armv7
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          version: '6.9.0'
          host: 'linux'
          target: 'desktop'
          arch: 'linux_gcc_64'
          modules: 'qtmultimedia'
          cache: true
          add-tools-to-path: true

      - name: Install Qt Android
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          target: 'android'
          arch: ${{ matrix.qt_arch }}
          modules: 'qtmultimedia'
          cache: true
          add-tools-to-path: true

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > android-keystore.jks || echo "No keystore provided"

      - name: Debug Qt components
        run: |
          echo "=== QT COMPONENTS DEBUG ==="
          echo "Contents of Qt cmake directory:"
          ls -la $QT_ROOT_DIR/lib/cmake/
          echo "Looking for Qt6Quick specifically:"
          ls -la $QT_ROOT_DIR/lib/cmake/Qt6Quick/ 2>/dev/null || echo "Qt6Quick cmake not found"
          echo "Looking for ALL Qt6 components:"
          find $QT_ROOT_DIR/lib/cmake/ -name "Qt6*" -type d
          echo "============================"

      - name: Set Android paths
        run: |
          echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV

      - name: Build Android APK
        env:
          KEYSTORE_PATH: ${{ github.workspace }}/android-keystore.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          # Add these for androiddeployqt
          QT_ANDROID_KEYSTORE_PATH: ${{ github.workspace }}/android-keystore.jks
          QT_ANDROID_KEYSTORE_ALIAS: ${{ secrets.KEY_ALIAS }}
          QT_ANDROID_KEYSTORE_STORE_PASS: ${{ secrets.KEYSTORE_PASSWORD }}
          QT_ANDROID_KEYSTORE_KEY_PASS: ${{ secrets.KEY_PASSWORD }}
        run: |
          # Debug: Check signing conditions
          echo "=== SIGNING DEBUG INFO ==="
          echo "KEYSTORE_PATH: $KEYSTORE_PATH"
          echo "Keystore file exists: $([ -f "$KEYSTORE_PATH" ] && echo "YES" || echo "NO")"
          echo "QT_ANDROID_KEYSTORE_PATH: $QT_ANDROID_KEYSTORE_PATH"
          echo "QT_ANDROID_KEYSTORE_ALIAS: $QT_ANDROID_KEYSTORE_ALIAS"
          echo "=========================="
          
          mkdir build
          cd build
      
          if [ -f "$KEYSTORE_PATH" ] && [ -n "$KEYSTORE_PASSWORD" ]; then
            echo "üîê BUILDING SIGNED APK for ${{ matrix.android_abi }}"
            cmake .. \
              -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
              -DCMAKE_PREFIX_PATH="$QT_ROOT_DIR" \
              -DCMAKE_FIND_ROOT_PATH="$QT_ROOT_DIR" \
              -DQT_HOST_PATH="$QT_HOST_PATH" \
              -DANDROID_SDK_ROOT="$ANDROID_SDK_ROOT" \
              -DANDROID_NDK="$ANDROID_NDK_ROOT" \
              -DANDROID_ABI=${{ matrix.android_abi }} \
              -DANDROID_PLATFORM=android-24
          else
            echo "üîì BUILDING DEBUG APK for ${{ matrix.android_abi }} (no signing secrets found)"
            cmake .. \
              -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
              -DCMAKE_PREFIX_PATH="$QT_ROOT_DIR" \
              -DCMAKE_FIND_ROOT_PATH="$QT_ROOT_DIR" \
              -DQT_HOST_PATH="$QT_HOST_PATH" \
              -DANDROID_SDK_ROOT="$ANDROID_SDK_ROOT" \
              -DANDROID_NDK="$ANDROID_NDK_ROOT" \
              -DANDROID_ABI=${{ matrix.android_abi }} \
              -DANDROID_PLATFORM=android-24
          fi
      
          cmake --build . --config Release
          cmake --install . --config Release

      - name: Clean up keystore
        if: always()
        run: rm -f android-keystore.jks

      - name: Find and Upload APK
        run: |
          find build -name "*.apk" -type f
          mkdir -p apk-output
          find build -name "*.apk" -type f -exec cp {} apk-output/ \;
          ls -la apk-output/

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Checkers_Android_${{ matrix.arch_name }}
          path: apk-output/*.apk