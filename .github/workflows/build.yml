name: Build
on:
  push:
  pull_request:
    branches:
      - main
env:
  QT_VERSION: '6.9.0'
jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Install Qt
        id: qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          arch: 'win64_msvc2022_64'
          modules: 'qtmultimedia'
          add-tools-to-path: true
          cache: true

      - name: Generate and Build with CMake
        shell: pwsh
        run: |
          mkdir -p build
          cd build
          cmake ..
          cmake --build . --config Release
          cmake --install . --config Release

      - name: Rename release folder
        shell: pwsh
        run: |
          $releaseDir = "build/install"
          $newDir = "Checkers"
          if (Test-Path $releaseDir) {
              Rename-Item -Path $releaseDir -NewName $newDir
          } else {
              Write-Error "Release folder not found!"
              exit 1
          }
      
      - name: Zip binaries folder
        shell: pwsh
        run: |
          $zipFile = "build/CheckCheckers_win64_msvc2022.zip"
          $folder = "build/Checkers"
          Compress-Archive -Path $folder -DestinationPath $zipFile
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: CheckCheckers_win64_msvc2022
          path: build/CheckCheckers_win64_msvc2022.zip
      
      - name: Get current version for installer
        id: get_version
        shell: bash
        run: |
          git fetch --tags
          # Get the latest semver tag (no v prefix)
          LATEST_TAG=$(git tag --list '*.*.*' --sort=-version:refname | head -n 1)

          if [ -z "$LATEST_TAG" ]; then
            # No existing semver tags, use 0.0.0
            CURRENT_VERSION="0.0.0"
          else
            # Use the current tag version directly
            CURRENT_VERSION=$LATEST_TAG
          fi

          echo "Current version: $CURRENT_VERSION"
          echo "TagVersion=${CURRENT_VERSION}" >> $GITHUB_ENV
      
      - name: Update .iss version
        shell: pwsh
        run: |
          $content = Get-Content tools/installer.iss
          $new = $content -replace '(?<=#define AppVersion ")[^"]+', "${{ env.TagVersion }}"
          Set-Content tools/installer.iss -Value $new
      
      - name: Create Installer
        shell: pwsh
        run: |
          $env:Path += ";${env:ProgramFiles(x86)}\Inno Setup 6"
          iscc.exe tools/installer.iss
      
      - name: Upload Installer
        uses: actions/upload-artifact@v4
        with:
          name: Checkers_Installer
          path: tools/Output/Checkers_Installer.exe