name: Build and release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release (major, minor, patch)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  QT_VERSION: '6.9.0'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Install Qt
        id: qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          arch: 'win64_msvc2022_64'
          modules: 'qtmultimedia'
          add-tools-to-path: true
          cache: true

      - name: Generate and Build with CMake
        shell: pwsh
        run: |
          mkdir -p build
          cd build
          cmake ..
          cmake --build . --config Release 
          cmake --install . --config Release

      - name: Rename release folder
        shell: pwsh
        run: |
          $releaseDir = "build/install"
          $newDir = "Checkers"
          if (Test-Path $releaseDir) {
              Rename-Item -Path $releaseDir -NewName $newDir
          } else {
              Write-Error "Release folder not found!"
              exit 1
          }

      - name: Zip binaries folder
        shell: pwsh
        run: |
          $zipFile = "build/Checkers_win64_msvc2022.zip"
          $folder = "build/Checkers"
          Compress-Archive -Path $folder -DestinationPath $zipFile

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Checkers_win64_msvc2022
          path: build/Checkers_win64_msvc2022.zip

      - name: Calculate next version for installer
        id: get_version
        shell: bash
        run: |
          git fetch --tags
          
          RELEASE_TYPE="${{ github.event.inputs.release_type || 'patch' }}"
          LATEST_TAG=$(git tag --list '*.*.*' --sort=-version:refname | head -n 1)

          if [ -z "$LATEST_TAG" ]; then
            NEW_VERSION="0.0.1"
          else
            echo "Latest tag: $LATEST_TAG"
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"

            case $RELEASE_TYPE in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac

            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi

          echo "Next version will be: $NEW_VERSION"
          echo "TagVersion=${NEW_VERSION}" >> $GITHUB_ENV

      - name: Update .iss version
        shell: pwsh
        run: |
          $content = Get-Content tools/installer.iss
          $new = $content -replace '(?<=#define AppVersion ")[^"]+', "${{ env.TagVersion }}"
          Set-Content tools/installer.iss -Value $new

      - name: Create Installer 
        shell: pwsh
        run: |
          $env:Path += ";${env:ProgramFiles(x86)}\Inno Setup 6"
          iscc.exe tools/installer.iss

      - name: Upload Installer
        uses: actions/upload-artifact@v4
        with:
          name: Checkers_Installer
          path: tools/Output/Checkers_Installer.exe

  build-android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - qt_arch: android_arm64_v8a
            android_abi: arm64-v8a
            arch_name: arm64
          - qt_arch: android_armv7
            android_abi: armeabi-v7a
            arch_name: armv7
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Qt Desktop
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          version: '6.9.0'
          host: 'linux'
          target: 'desktop'
          arch: 'linux_gcc_64'
          modules: 'qtmultimedia'
          cache: true
          add-tools-to-path: true

      - name: Install Qt Android
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          target: 'android'
          arch: ${{ matrix.qt_arch }}
          modules: 'qtmultimedia'
          cache: true
          add-tools-to-path: true

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > android-keystore.jks || echo "No keystore provided"

      - name: Set Android paths
        run: |
          echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV

      - name: Build Android APK
        env:
          KEYSTORE_PATH: ${{ github.workspace }}/android-keystore.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          # Debug: Check signing conditions
          echo "=== SIGNING DEBUG INFO ==="
          echo "KEYSTORE_PATH: $KEYSTORE_PATH"
          echo "Keystore file exists: $([ -f "$KEYSTORE_PATH" ] && echo "YES" || echo "NO")"
          echo "Store password set: $([ -n "$KEYSTORE_PASSWORD" ] && echo "YES" || echo "NO")"
          echo "Key password set: $([ -n "$KEY_PASSWORD" ] && echo "YES" || echo "NO")"
          echo "=========================="
          
          mkdir build
          cd build
       
          if [ -f "$KEYSTORE_PATH" ] && [ -n "$KEYSTORE_PASSWORD" ]; then
            echo "üîê BUILDING RELEASE APK for ${{ matrix.android_abi }} (will sign and align manually)"
          else
            echo "üîì BUILDING DEBUG APK for ${{ matrix.android_abi }}"
          fi
       
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
            -DCMAKE_PREFIX_PATH="$QT_ROOT_DIR" \
            -DCMAKE_FIND_ROOT_PATH="$QT_ROOT_DIR" \
            -DQT_HOST_PATH="$QT_HOST_PATH" \
            -DANDROID_SDK_ROOT="$ANDROID_SDK_ROOT" \
            -DANDROID_NDK="$ANDROID_NDK_ROOT" \
            -DANDROID_ABI=${{ matrix.android_abi }} \
            -DANDROID_PLATFORM=android-24 \
            -DCMAKE_BUILD_TYPE=Release
       
          cmake --build . --config Release
          cmake --install . --config Release
       
          # Manual signing and alignment if keystore exists
          if [ -f "$KEYSTORE_PATH" ] && [ -n "$KEYSTORE_PASSWORD" ]; then
            echo "üîè Manually signing and aligning APK..."
            UNSIGNED_APK=$(find . -name "*unsigned.apk" -type f | head -1)
            SIGNED_APK="${UNSIGNED_APK%%-unsigned.apk}.apk"
            ALIGNED_APK="${UNSIGNED_APK%%-unsigned.apk}-aligned.apk"
            
            # Find build tools
            BUILD_TOOLS_DIR=$(find $ANDROID_SDK_ROOT/build-tools -maxdepth 1 -type d | sort -V | tail -1)
            ZIPALIGN="$BUILD_TOOLS_DIR/zipalign"
            APKSIGNER="$BUILD_TOOLS_DIR/apksigner"
            echo "Found zipalign at: $ZIPALIGN"
            echo "Found apksigner at: $APKSIGNER"
            
            if [ ! -f "$ZIPALIGN" ]; then
              echo "‚ùå zipalign not found, trying alternative path..."
              ZIPALIGN=$(find $ANDROID_SDK_ROOT/build-tools -name "zipalign" -type f | head -1)
              echo "Alternative zipalign path: $ZIPALIGN"
            fi
            
            if [ ! -f "$APKSIGNER" ]; then
              echo "‚ùå apksigner not found, trying alternative path..."
              APKSIGNER=$(find $ANDROID_SDK_ROOT/build-tools -name "apksigner" -type f | head -1)
              echo "Alternative apksigner path: $APKSIGNER"
            fi
            
            echo "Found unsigned APK: $UNSIGNED_APK"
            echo "Step 1: Aligning APK..."
            # Align first, then sign (proper order)
            "$ZIPALIGN" -v 4 "$UNSIGNED_APK" "$ALIGNED_APK"
            
            echo "Step 2: Signing APK with v2 signature..."
            # Use apksigner for v2+ signatures
            "$APKSIGNER" sign \
              --ks "$KEYSTORE_PATH" \
              --ks-key-alias "$KEY_ALIAS" \
              --ks-pass pass:"$KEYSTORE_PASSWORD" \
              --key-pass pass:"$KEY_PASSWORD" \
              --out "$SIGNED_APK" \
              "$ALIGNED_APK"
            
            # Clean up temp files
            rm -f "$UNSIGNED_APK" "$ALIGNED_APK"
            
            echo "‚úÖ APK aligned and signed successfully: $SIGNED_APK"
          fi

      - name: Clean up keystore
        if: always()
        run: rm -f android-keystore.jks

      - name: Find and Upload APK
        run: |
          echo "Looking for APK files:"
          find build -name "*.apk" -type f
          echo "Copying and renaming signed APK:"
          mkdir -p apk-output
          # Copy the signed release APK
          find build -name "*release.apk" -type f -exec cp {} apk-output/Checkers_${{ matrix.arch_name }}.apk \;
          ls -la apk-output/

      - name: Verify APK signing
        run: |
          echo "=== APK SIGNING VERIFICATION ==="
          for apk in apk-output/*.apk; do
            echo "Checking $apk:"

            # Method 1: Check for META-INF signing files first (works without aapt/apksigner)
            echo "Checking for signing certificates..."
            if unzip -l "$apk" | grep -q "META-INF.*\.(RSA\|DSA\|SF\|MF)"; then
              echo "‚úÖ APK contains signing certificates:"
              unzip -l "$apk" | grep "META-INF.*\.(RSA\|DSA\|SF\|MF)" | head -3
            else
              echo "‚ùå APK appears to be unsigned (no META-INF signing files)"
            fi

            # Method 2: Use aapt to check if debuggable (if available)
            if command -v aapt >/dev/null 2>&1; then
              if aapt dump badging "$apk" | grep -q "application-debuggable='true'"; then
                echo "‚ö†Ô∏è  APK is debuggable (debug build)"
              else
                echo "‚úÖ APK is not debuggable (release build)"
              fi
            else
              echo "‚ÑπÔ∏è  aapt not available, skipping debuggable check"
            fi

            # Method 3: Use apksigner to verify signature (if available)
            if command -v apksigner >/dev/null 2>&1; then
              echo "APK signature verification:"
              apksigner verify --verbose "$apk" && echo "‚úÖ APK is properly signed" || echo "‚ùå APK is not signed or signature invalid"
            else
              echo "‚ÑπÔ∏è  apksigner not available for signature verification"
            fi

            echo "---"
          done
          echo "============================="

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Checkers_Android_${{ matrix.arch_name }}
          path: apk-output/*.apk

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-android]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: Checkers_win64_msvc2022

      - name: Download Windows Installer
        uses: actions/download-artifact@v4
        with:
          name: Checkers_Installer
          path: installer

      - name: Download Android APK (arm64)
        uses: actions/download-artifact@v4
        with:
          name: Checkers_Android_arm64
          path: android-arm64

      - name: Download Android APK (armv7)
        uses: actions/download-artifact@v4
        with:
          name: Checkers_Android_armv7
          path: android-armv7
          
      - name: Bump version and create release
        id: bump_release
        run: |
          git fetch --tags

          RELEASE_TYPE="${{ github.event.inputs.release_type || 'patch' }}"
          LATEST_TAG=$(git tag --list '*.*.*' --sort=-version:refname | head -n 1)

          if [ -z "$LATEST_TAG" ]; then
            # No existing semver tags, start with 0.0.1
            NEW_TAG="0.0.1"
          else
            # Parse the latest tag
            echo "Latest tag: $LATEST_TAG"
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"

            case $RELEASE_TYPE in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac

            NEW_TAG="${MAJOR}.${MINOR}.${PATCH}"
          fi

          echo "Release type: $RELEASE_TYPE"
          echo "New tag is $NEW_TAG"
          git tag $NEW_TAG
          git push origin $NEW_TAG
          echo "new_tag=$NEW_TAG" >> $GITHUB_ENV

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.new_tag }}
          release_name: ${{ env.new_tag }}
          body: ""
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Checkers_win64_msvc2022.zip
          asset_name: Checkers_win64_msvc2022.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows Installer asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: installer/Checkers_Installer.exe 
          asset_name: Checkers_Installer.exe  
          asset_content_type: application/vnd.microsoft.portable-executable
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Android APK (arm64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: android-arm64/Checkers_arm64.apk
          asset_name: Checkers_arm64-v8a.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Android APK (armv7)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: android-armv7/Checkers_armv7.apk
          asset_name: Checkers_armeabi-v7a.apk
          asset_content_type: application/vnd.android.package-archive