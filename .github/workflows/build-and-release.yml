name: Build and release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release (major, minor, patch)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  QT_VERSION: '6.9.0'

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Install Qt
        id: qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          arch: 'win64_llvm_mingw'
          modules: 'qtmultimedia'
          add-tools-to-path: true
          cache: true

      - name: Generate and Build with CMake
        shell: pwsh
        run: |
          mkdir -p build
          cd build
          cmake ..
          cmake --build . --config Release 
          cmake --install . --config Release

      - name: Rename release folder
        shell: pwsh
        run: |
          $releaseDir = "build/install"
          $newDir = "Checkers"
          if (Test-Path $releaseDir) {
              Rename-Item -Path $releaseDir -NewName $newDir
          } else {
              Write-Error "Release folder not found!"
              exit 1
          }

      - name: Zip binaries folder
        shell: pwsh
        run: |
          $zipFile = "build/Checkers_win64_llvm_mingw.zip"
          $folder = "build/Checkers"
          Compress-Archive -Path $folder -DestinationPath $zipFile

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Checkers_win64_llvm_mingw
          path: build/Checkers_win64_llvm_mingw.zip

      - name: Get latest Git tag and bump version
        id: get_version
        shell: bash
        run: |
          git fetch --tags
          # Get the latest semver tag
          LATEST_TAG=$(git tag --list '*.*.*' --sort=-version:refname | head -n 1)
         
          if [ -z "$LATEST_TAG" ]; then
            # No existing semver tags, start with 0.0.1
            NEW_VERSION="0.0.1"
          else
            # Parse the latest tag
            VERSION=$LATEST_TAG
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
           
            # For the installer, we'll use just the patch number like before
            NEW_VERSION="0.0.$((PATCH + 1))"
          fi
         
          echo "New version: $NEW_VERSION"
          echo "TagVersion=${NEW_VERSION}" >> $GITHUB_ENV

      - name: Update .iss version
        shell: pwsh
        run: |
          # Use the version number calculated in the previous step
          $content = Get-Content tools/installer.iss
          $new = $content -replace '(?<=#define AppVersion ")[^"]+', "${{ env.TagVersion }}"
          Set-Content tools/installer.iss -Value $new

      - name: Create Installer 
        shell: pwsh
        run: |
          $env:Path += ";${env:ProgramFiles(x86)}\Inno Setup 6"
          iscc.exe tools/installer.iss

      - name: Upload Installer
        uses: actions/upload-artifact@v4
        with:
          name: Checkers_Installer
          path: tools/Output/Checkers_Installer.exe

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: Checkers_win64_llvm_mingw

      - name: Download Windows Installer
        uses: actions/download-artifact@v4
        with:
          name: Checkers_Installer
          path: installer
          
      - name: Bump version and create release
        id: bump_release
        run: |
          git fetch --tags

          RELEASE_TYPE="${{ github.event.inputs.release_type || 'patch' }}"
          LATEST_TAG=$(git tag --list '*.*.*' --sort=-version:refname | head -n 1)

          if [ -z "$LATEST_TAG" ]; then
            # No existing semver tags, start with 0.0.1
            NEW_TAG="0.0.1"
          else
            # Parse the latest tag
            echo "Latest tag: $LATEST_TAG"
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"

            case $RELEASE_TYPE in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac

            NEW_TAG="${MAJOR}.${MINOR}.${PATCH}"
          fi

          echo "Release type: $RELEASE_TYPE"
          echo "New tag is $NEW_TAG"
          git tag $NEW_TAG
          git push origin $NEW_TAG
          echo "new_tag=$NEW_TAG" >> $GITHUB_ENV

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.new_tag }}
          release_name: ${{ env.new_tag }}
          body: ""
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Checkers_win64_llvm_mingw.zip
          asset_name: Checkers_win64_llvm_mingw.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows Installer asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: installer/Checkers_Installer.exe 
          asset_name: Checkers_Installer.exe  
          asset_content_type: application/vnd.microsoft.portable-executable
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}